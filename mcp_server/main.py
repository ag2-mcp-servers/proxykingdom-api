# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:44:51+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import Proxy

app = MCPProxy(
    title='ProxyKingdom-Api',
    version='v1',
    servers=[{'url': 'https://api.proxykingdom.com/'}],
)


@app.get('/proxy', tags=['proxy_configuration_handling'])
def get_proxy(
    token: Optional[str] = Query(None, alias='Token'),
    address: Optional[str] = Query(None, alias='Address'),
    port: Optional[str] = Query(None, alias='Port'),
    protocol: Optional[str] = Query(None, alias='Protocol'),
    access_type: Optional[str] = Query(None, alias='AccessType'),
    response_time: Optional[str] = Query(None, alias='ResponseTime'),
    is_ssl: Optional[str] = Query(None, alias='IsSsl'),
    uptime: Optional[str] = Query(None, alias='Uptime'),
    country: Optional[str] = Query(None, alias='Country'),
    continent: Optional[str] = Query(None, alias='Continent'),
    timezone: Optional[str] = Query(None, alias='Timezone'),
    last_tested: Optional[str] = Query(None, alias='LastTested'),
    correlation_id: str = 'd85ab6a3-51a9-4359-b9d3-41f5dffb366e',
):
    """
    Gets a random proxy for chosen parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
